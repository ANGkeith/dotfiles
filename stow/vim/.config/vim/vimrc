" Good Read https://github.com/romainl/idiomatic-vimrc
if has('nvim')
    " with this line, neovim will not read configurations from
    " $XDG_CONFIG_HOME/nvim/init.vim
    set runtimepath^=$XDG_CONFIG_HOME/vim runtimepath+=$XDG_CONFIG_HOME/vim/after
    let &packpath = &runtimepath
else
    set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
    set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
    let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"
endif

"  Behaviour Modification {{{
    " Show line number
    set number

    " Better mouse support
    set mouse=a

    " Open new split panes to right and bottom which feels more natural
    set splitbelow
    set splitright

    " Display all matcModificationhing files when we tab complete
    set path+=**
    " Visual autocomplete for command menu
    set wildmenu

    filetype plugin on

    " Replace existing tab with 4 spaces width
    set tabstop=4
    " Number of spaces during insert mode
    set softtabstop=4
    " When indenting with '>', use 4 spaces width
    set shiftwidth=4
    " On pressing tab, insert 4 spaces
    set expandtab
    " Shifting using `>` / `<` will be rounded off. ie. when i am at 3 spaces,
    " hitting `>>` will bring to 4 spaces instead of 3+`shiftwidth` spaces
    set shiftround

    " Trigger SpellBad highlight group for trailing spaces
    match SpellBad /\s\+$/
    " highlight matching [{()}]
    set showmatch

    " highlight search term on the fly
    set incsearch

    " highlight current line based on CursorLine
    set cursorline

    set fillchars+=vert:\ ,eob:\ 

    set textwidth=0
    set undofile
    set undodir=$XDG_DATA_HOME/vim/undodir

    " autoreload the file in Vim if it has been changed outside of Vim
    set autoread

    " Change cursor in the various different mode
    if has('nvim')
        set guicursor=n-c:block,i-ci-ve:ver40,r-cr-v:hor20,o:hor50,a:Cursor/lCursor,sm:block
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_SR = "\<Esc>]50;CursorShape=2\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
        if exists('$TMUX')
            let &t_SI = "\ePtmux;\e" . &t_SI . "\e\\"
            let &t_EI = "\ePtmux;\e" . &t_EI . "\e\\"
        endif
    endif

    " Always showing status line
    set laststatus=2

    set noswapfile
    set hidden

    " Should make scrolling faster
    set lazyredraw

    " Always use vertical diffs
    set diffopt+=vertical

    " make a copy of the file and overwrite the original one. ie. inode of file
    " remains unchanged otherwise links may be broken
    set backupcopy=yes

    if has("nvim")
        " show live preview when doing commands like :substitute
        set inccommand=nosplit

        " Hide the vim mode message in the last line (Insert, Replace, Visual)
        set noshowmode

    endif
"}}}
" Custom Mapping {{{
    " note that <space> in normal mode is mapped to right, thus this is to override that settings
    nnoremap <space> <Nop>
    let mapleader="\<space>"

    " Map emacs binding in insert mode
    inoremap <c-a> <home>
    inoremap <c-e> <end>

    " so that it will use the scrolling plugin
    nmap <c-e> <c-u>
    " If a line gets wrapped to two lines, j wont skip over the '2nd line'
    nnoremap j gj
    nnoremap k gk

    " use tab to jump across brackets
    nnoremap <c-i> %
    vnoremap <c-i> %

    " move to and highlight last edited text
    nnoremap gV `[v`]

    " If completetion popup is visble
    inoremap <expr> <c-j> pumvisible() ? "\<c-n>" : "\<c-j>"
    inoremap <expr> <c-k> pumvisible() ? "\<c-p>" : "\<c-k>"

    imap <c-j> <c-n>
    imap <c-k> <c-p>

    nnoremap <c-k> {
    nnoremap <c-j> }

    " mapping space to toggle pane
    nnoremap <space>` <c-w>w

    " Pane Resize
    " go to insert mode <c-v> <some key> to get the literal terminal keycode
    set timeout timeoutlen=1000 ttimeoutlen=100
    set <f37>=[1;5a
    map <f37> <c-up>
    nnoremap <c-up> <c-w>+
    set <f36>=[1;5b
    map <f36> <c-down>
    nnoremap <c-down> <c-w>-
    set <f35>=[1;5c
    map <f35> <c-right>
    nnoremap <c-right> <c-w>>
    set <f34>=[1;5d
    map <f34> <c-left>
    nnoremap <c-left> <c-w><

    " wrap current line
    nnoremap <leader>j viw<ESC>mpa<CR><ESC>`p

    " Quickly quit editing without save
    nnoremap <leader>q :q<CR>
    nnoremap <leader>fs :w<CR>

    nnoremap <leader>sv :source $MYVIMRC<cr>
    nnoremap <leader>ev :vsplit $MYVIMRC<cr>

    " Toggle between buffer
    nnoremap <space><tab> :b#<cr>

    " Allow saving of files as sudo when I forgot to start vim using sudo.
    cmap w!! w !sudo tee > /dev/null %

    " Map Ctrl c & v for copy and paste from system clipboard
    vnoremap <c-c> "+y
    nnoremap p p=`]

    " secondary keyboard
    vnoremap <leader>c "*y
    nnoremap <leader>v "*p=`]

    " remove trailing spaces
    nnoremap <silent> <f5> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>

    " Easier buffer navigations
    nnoremap gb :ls<CR>:b<Space>

    " Map ctrl a to copy whole file
    nnoremap <c-a> ggVG
    inoremap jk <esc>

    noremap <M-h> <<
    noremap <M-l> >>
    vnoremap <M-h> <
    vnoremap <M-l> >

    " Custom Text Objects {{{
    onoremap iq :exec 'normal! vi"'<cr>
    onoremap aq :exec 'normal! va"'<cr>
    " }}}
" }}}
" Plugin Configurations {{{
    " coc-explorer {{{
        map <c-n> :CocCommand explorer<CR>
        map <leader>e :CocCommand explorer<CR>
        autocmd FileType coc-explorer setlocal winhighlight=Normal:ColorColumn,EndOfBuffer:ColorColumn
        " Close coc-explorer and quickfix if it's the only buffer open
        autocmd WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&filetype") == "coc-explorer" |q|endif
    " }}}
    " coc-yank {{{
    nnoremap <silent> <space>y  :<C-u>CocList -A --normal yank<cr>
    " }}}
    " indentline {{{
        let g:indentLine_fileTypeExclude = ['json', 'md']
        let g:indentLine_setConceal = 2
        " default ''.
        " " n for Normal mode
        " " v for Visual mode
        " " i for Insert mode
        " " c for Command line editing, for 'incsearch'
        " default value is "inc"
        let g:indentLine_concealcursor = ""
        let g:indentLine_char = 'â”‚'
    " }}}
    " quickr-preview {{{
        let g:quickr_preview_exit_on_enter = 0
        let g:quickr_preview_on_cursor = 1
        let g:quickr_preview_position = 'below'
        " disable key mappings for quick previewr
        let g:quickr_preview_keymaps = 0
        let g:quickr_preview_size = '8'
        let g:quickr_preview_options = 'number norelativenumber nofoldenable'
    " }}}
    " vim-gitgutter {{{
        nnoremap <leader>hd :GitGutterPreviewHunk<cr>
        nnoremap <leader>hu :GitGutterUndoHunk<cr>
        nnoremap <leader>hs :GitGutterStageHunk<cr>
    "}}}
    " vimwiki {{{
        " Do not use vimwiki filetype for non-vimwiki md files
        let g:vimwiki_global_ext = 0
        " if the path is changed, remember to update the screenshot script as well
        let g:vimwiki_list = [{'path': '~/Documents/vimwiki/',
                            \ 'syntax': 'markdown',
                            \ 'ext': '.md',
                            \ 'index': 'README',}]
        let g:vimwiki_conceallevel = 0
    "}}}
    " vim-markdown {{{
        let g:vim_markdown_conceal = 0
        let g:vim_markdown_auto_insert_bullets = 0
    "}}}
    " vim-markdown-toc {{{
        let g:vmt_fence_text = 'Do not edit, run `:UpdateToc` to update'
        let g:vmt_auto_update_on_save = 0
    "}}}
    " vim-instant-markdown {{{
        let g:instant_markdown_slow = 0
        let g:instant_markdown_autostart = 0
        let g:instant_markdown_mathjax = 1
        let g:instant_markdown_logfile = '/tmp/instant_markdown.log'
        let g:instant_markdown_autoscroll = 1
        let g:instant_markdown_browser = "google-chrome"
    " }}}
    " tagbar {{{
        let g:tagbar_type_vimwiki = {
                \ 'ctagstype' : 'vimwiki',
                \ 'kinds' : [
                        \ 'h:headings',
                \ ],
            \ 'sort' : 0
        \ }
        let g:tagbar_width = 30
        let g:tagbar_left = 1

        nnoremap \tb :TagbarToggle<cr>
    "}}}
    " fzf & searching stuff {{{
    " ripgrep
        if executable('rg')
            let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*" 2> /dev/null'
            set grepprg=rg\ --vimgrep\ --hidden
        endif

        command! -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!

        try
            let git_root_dir = systemlist('git rev-parse --show-toplevel')[0]
        catch "E684"
            " vim throws this error
        endtry

        " Finding files with preview equivalent to (C-T) in terminal (set base dir to git root)
        if v:shell_error != 0
            echom "No git directory found"
            nnoremap <c-p> :Files<space><cr>
        else
            nnoremap <c-p> :GitFiles<space><cr>
        endif


        " Finding files with preview equivalent to (C-T) in terminal (set base dir to git root)
        command! -bang -nargs=? -complete=dir Files call fzf#vim#files(<q-args>, <bang>0)

        command! -bang -nargs=? -complete=dir GitFiles
            \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'dir': systemlist('git rev-parse --show-toplevel')[0]}), <bang>0)

        let $FZF_DEFAULT_OPTS .= ' --color=fg+:#000000,bg+:#b6d5d7,hl+:#d7005f --color=info:#4271ae,prompt:#8959a8,pointer:#d7005f --color=marker:#4271ae,spinner:#4271ae,header:#4271ae'

    "}}}
    " ale {{{
        let g:ale_completion_tsserver_autoimport = 0
        let g:ale_set_quickfix = 0
        let g:ale_set_highlights = 1

        " " Error message format
        let g:ale_echo_msg_error_str = 'E'
        let g:ale_echo_msg_warning_str = 'W'
        let g:ale_echo_msg_format = '[%linter%] %s [%severity%] [%code%]'
        " Run :ALEFix upon save
        let g:ale_fix_on_save = 1
        " general ALE config
        let g:ale_fixers = {'*': ['remove_trailing_lines']}
        " python ALE configurations
        let g:ale_fixers = {'python': ['isort', 'autopep8', 'black']}
        let g:ale_python_autopep8_options = "-i"
        let g:ale_python_black_options = "-l 80"
        let g:ale_python_mypy_options = "--ignore-missing-imports --disallow-untyped-defs"
        let g:ale_python_flake8_options = "--max-line-length=80"
        let g:ale_python_pylint_use_msg_id = 1
        let g:ale_python_pylint_change_directory=0


        " error navigation
        nmap <silent> ,e <Plug>(ale_previous_wrap)
        nmap <silent> ,d <Plug>(ale_next_wrap)
    "}}}
    " lightline-ale {{{
        let g:lightline#ale#indicator_checking = "\uf110 "
        let g:lightline#ale#indicator_warnings = "\uf071 "
        let g:lightline#ale#indicator_errors = "\uf05e "
        let g:lightline#ale#indicator_ok = "\uf00c "
    " }}}
    " lightline {{{
        let g:lightline = {
            \ 'colorscheme': 'onedark',
            \ 'active': {
            \   'left': [ [ 'mode', 'paste' ],
            \             [ 'gitbranch', 'readonly', 'filename', 'modified' ]],
            \   'right': [
            \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
            \             [ 'lineinfo' ],
            \             [ 'percent' ],
            \             [ 'fileformat', 'fileencoding', 'filetype', 'charvaluehex' ]],
            \ },
            \ 'inactive': {
            \   'left': [ [ 'horizontal_seperator' ] ],
            \   'right': [],
            \ },
            \ 'component_function': {
            \   'gitbranch': 'fugitive#head',
            \   'filetype': 'DeviconFileType',
            \   'fileformat': 'DeviconFileFormat',
            \   'cocstatus': 'coc#status',
            \   'readonly': 'LightlineReadonly',
            \   'horizontal_seperator': 'HorizontalSeperator',
            \ },
            \ 'component_expand': {
            \   'linter_checking': 'lightline#ale#checking',
            \   'linter_warnings': 'lightline#ale#warnings',
            \   'linter_errors': 'lightline#ale#errors',
            \   'linter_ok': 'lightline#ale#ok',
            \ },
            \ 'component_type': {
            \   'linter_checking': 'left',
            \   'linter_warnings': 'warning',
            \   'linter_errors': 'error',
            \   'linter_ok': 'left',
            \ }}

        " helper function {{{
            function! DeviconFileType()
                return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
            endfunction
            function! DeviconFileFormat()
                return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
            endfunction

            function! HorizontalSeperator()
                let l:fillChar = 'â”€'
                let l:fileName = ' ' . expand('%:t') . ' '
                let l:fileNameLength = len(fileName)
                let l:totalCharsNeeded = winwidth(0) - 2
                let l:charsToFill =  totalCharsNeeded - fileNameLength

                if l:fileNameLength
                    let l:left_part = repeat(fillChar, l:charsToFill/2)
                    let l:middle_part = fileName
                    let l:right_part = repeat(fillChar, l:charsToFill/2)

                    " if odd
                    if charsToFill % 2
                        let l:right_part = right_part . fillChar
                    endif
                else
                    return repeat(fillChar, winwidth(0) - 2)
                endif

                return l:left_part . l:middle_part . l:right_part
            endfunction

            autocmd VimEnter * call SetupLightlineColors()
                function SetupLightlineColors() abort
                let l:pallete = lightline#palette()
                let l:pallete.inactive.left = [
                \ ['#5fafaf', '#282c34', '145', '236'],
                \ ['#5fafaf', '#282c34', '145', '236']
                \]
                call lightline#colorscheme()
            endfunction
        "  }}}
    " }}}
    " vim-subversive {{{
        nmap s <plug>(SubversiveSubstituteRangeConfirm)
        xmap s <plug>(SubversiveSubstituteRangeConfirm)
        nmap ss <plug>(SubversiveSubstituteWordRangeConfirm)
        " ie = inner entire buffer
        onoremap ie :exec "normal! ggVG"<cr>
    " }}}
    " supertab {{{
        let g:SuperTabDefaultCompletionType = "<c-n>"
    " }}}
    " coc {{{
        " add npm to path
        let g:coc_node_path = expand("$NODE_PATH") .  '/node'
        let g:python3_host_prog = '/usr/bin/python'

        " You will have bad experience for diagnostic messages when it's default 4000.
        set updatetime=300

        " show_documentation function {{{
            function! s:show_documentation()
                if (index(['vim','help'], &filetype) >= 0)
                    execute 'h '.expand('<cword>')
                else
                    call CocAction('doHover')
                endif
            endfunction
        " }}}
        " Highlight symbol under cursor on CursorHold (use with coc-highlight)
        autocmd CursorHold * silent call CocActionAsync('highlight')

        augroup mygroup
            autocmd!
            " Setup formatexpr specified filetype(s).
            autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
            " Update signature help on jump placeholder
            autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
        augroup end


        " Create mappings for function text object, requires document symbols feature of languageserver.
        xmap if <Plug>(coc-funcobj-i)
        xmap af <Plug>(coc-funcobj-a)
        omap if <Plug>(coc-funcobj-i)
        omap af <Plug>(coc-funcobj-a)

        " Use `:Format` to format current buffer
        command! -nargs=0 Format :call CocAction('format')

        " Use `:Fold` to fold current buffer
        command! -nargs=? Fold :call     CocAction('fold', <f-args>)

        " use `:OR` for organize import of current buffer
        command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

       " Use K to show documentation in preview window
        nnoremap <silent> K :call <SID>show_documentation()<CR>

        " Remap keys for gotos
        nmap <silent> gd <Plug>(coc-definition)
        nmap <silent> gy <Plug>(coc-type-definition)
        nmap <silent> gi <Plug>(coc-implementation)
        nmap <silent> gr <Plug>(coc-references)
        " Use <c-space> to trigger completion.
        inoremap <silent><expr> <c-space> coc#refresh()


        " Remap for rename current word
        nmap \rn <Plug>(coc-rename)

        " Remap for format selected region
        xmap \f  <Plug>(coc-format-selected)
        nmap \f  <Plug>(coc-format-selected)

        " Use `[g` and `]g` to navigate diagnostics
        nmap <silent> [g <Plug>(coc-diagnostic-prev)
        nmap <silent> ]g <Plug>(coc-diagnostic-next)

        " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
        xmap \a  <Plug>(coc-codeaction-selected)
        nmap \a  <Plug>(coc-codeaction-selected)

        " Remap for do codeAction of current line
        nmap \ac  <Plug>(coc-codeaction)

        " Using CocList
        " Show all diagnostics
        nnoremap <silent> \a  :<C-u>CocList diagnostics<cr>
        " Manage extensions
        nnoremap <silent> \e  :<C-u>CocList extensions<cr>
        " Show commands
        nnoremap <silent> \c  :<C-u>CocList commands<cr>
        " Find symbol of current document
        nnoremap <silent> \o  :<C-u>CocList outline<cr>
        " Search workspace symbols
        nnoremap <silent> \s  :<C-u>CocList -I symbols<cr>
        " Do default action for next item.
        nnoremap <silent> \j  :<C-u>CocNext<CR>
        " Do default action for previous item.
        nnoremap <silent> \k  :<C-u>CocPrev<CR>
        " Resume latest coc list
        nnoremap <silent> \p  :<C-u>CocListResume<CR>
    " }}}
    " vimagit {{{
    nnoremap <leader>gg :Magit<cr>
    "}}}
    " vim-devicons {{{
        let g:DevIconsEnableFoldersOpenClose = 1
        " quickfix to prevent orange color folder
        highlight! link NERDTreeFlags NERDTreeDir
    " }}}
    " vim-maximizer {{{
        nnoremap <c-f> :MaximizerToggle<CR>
        vnoremap <c-f> :MaximizerToggle<CR>gv
        inoremap <c-f> <C-o>:MaximizerToggle<CR>
    "
    " }}}
    " vim-polyglot {{{
        " polylglot clashes with vimwiki plugin
        let g:polyglot_disabled = ['markdown']
    " }}}
    " vim-multi-cursor {{{
        let g:VM_default_mappings = 0
        let g:VM_mouse_mappings = 1
        let g:VM_maps = {}
        let g:VM_maps['Find Under']         = '<M-d>'
    " }}}
    " vimagit {{{
        let g:magit_commit_mapping = 'cc'
        let g:magit_commit_amend_mapping = 'ca'
        let g:magit_stage_hunk_mapping = 's'
        let g:magit_jump_next_hunk = '<c-j>'
        let g:magit_jump_prev_hunk = '<c-k>'
        let g:magit_ignore_mapping = 'i'
        let g:magit_folding_toggle_mapping = ['<c-i>']
    " }}}
" }}}
"  Plugins {{{
call plug#begin()
    " essentials {{{
        Plug 'tpope/vim-surround'
        Plug 'kana/vim-repeat'
        Plug 'tpope/vim-commentary'
        Plug 'ervandew/supertab'
        Plug 'ronakg/quickr-preview.vim'
        if has('patch-8.1.2250')
            Plug 'bfrg/vim-qf-preview'
        endif
        " Plugin outside ~/.vim/plugged with post-update hook
        Plug 'junegunn/fzf'
        Plug 'junegunn/fzf.vim'
        " add some square bracket mappings
        Plug 'tpope/vim-unimpaired'
    " }}}
    " IDE {{{
        " improved syntax highlighting
        Plug 'sheerun/vim-polyglot'
        " Used mainly for fixing and linting
        Plug 'dense-analysis/ale'
        " Mainly for autocompletion
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
    " }}}
    " filetype markdown {{{
        Plug 'vimwiki/vimwiki'
        ":GenTocGFM -> generate toc with github flavoured markdown
        Plug 'mzlogin/vim-markdown-toc', { 'for': 'vimwiki' }
    " }}}
    " filetype javascript {{{
        Plug 'pangloss/vim-javascript', {'for': 'js'}

    " }}}
    " git integration {{{
        Plug 'tpope/vim-fugitive'
        " indicate added/modified/removed lines in a file
        " git commit browser
        Plug 'junegunn/gv.vim'
        Plug 'airblade/vim-gitgutter'
        Plug 'jreybert/vimagit'
        " add Gbrowse to jump to github
        Plug 'tpope/vim-rhubarb'
    " }}}
    " asthethics {{{
        Plug 'joshdick/onedark.vim'
        Plug 'NLKNguyen/papercolor-theme'
        Plug 'itchyny/lightline.vim'
        Plug 'maximbaz/lightline-ale'
        " indentation line
        Plug 'yggdroot/indentline'
        Plug 'tmux-plugins/vim-tmux-focus-events'
        Plug 'ryanoasis/vim-devicons'
    "  }}}
    "  bloat {{{
        " dependency for vim-radical
        Plug 'glts/vim-magnum'
        " convert between decimal, hex, octal and binary representation
        Plug 'glts/vim-radical'

        Plug 'svermeulen/vim-subversive'
        " for toggling between different variant
        Plug 'tpope/vim-abolish'
    "  }}}
    " utils {{{
        " full screen
        Plug 'szw/vim-maximizer'

        Plug 'godlygeek/tabular'

        Plug 'obreitwi/vim-sort-folds'
        Plug 'mg979/vim-visual-multi', {'branch': 'master'}

        " smooth scrolling
        Plug 'psliwka/vim-smoothie'
    " }}}
    Plug 'majutsushi/tagbar'
    Plug 'jiangmiao/auto-pairs'
    Plug 'tommcdo/vim-lion'
    Plug 'suan/vim-instant-markdown', {'for': 'markdown'}

call plug#end()
"}}}
" Automatically install missing plugins on startup {{{
autocmd VimEnter *
  \  if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \|   PlugInstall --sync | q
  \| endif
" }}}
" }}}
" Colorscheme {{{
    set t_Co=256
    " True color support
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    syntax on

    set background=light
    let g:PaperColor_Theme_Options = {
                \   'theme': {
                \     'default': {
                \       'allow_bold': 1,
                \       'allow_italic': 1,
                \       'override' : {
                \         'color00' : ['#ffffff', '231'],
                \         'linenumber_bg' : ['#ffffff', '231'],
                \         'linenumber_fg' : ['#6097AB'],
                \         'vertsplit_bg' : ['#E4E4E4', '231'],
                \       }
                \     }
                \   }
                \ }
    let g:lightline = { 'colorscheme': 'PaperColor' }
    colorscheme PaperColor
    " override {{{
        hi Search guibg=#FFD787
        hi Pmenu guibg=#E4E4E4

        " nicer color in vim-magit
        hi diffAdded guibg=#AFFFAF guifg=#3f3f3f
        hi diffRemoved guibg=#FFD7FF guifg=#3f3f3f
        hi HighlightedyankRegion guibg=#FFD787

    " }}}

    " Useful for highlighting under cursor {{{
        map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
                    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
                \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
        function! Syn()
            for id in synstack(line("."), col("."))
                echo synIDattr(id, "name")
            endfor
        endfunction
        command! -nargs=0 Syn call Syn()

    " }}}
" }}}
